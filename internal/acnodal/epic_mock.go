// Code generated by MockGen. DO NOT EDIT.
// Source: internal/acnodal/epic.go

// Package acnodal is a generated GoMock package.
package acnodal

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gatewayv1a2 "sigs.k8s.io/gateway-api/apis/v1alpha2"
)

// MockEPIC is a mock of EPIC interface
type MockEPIC struct {
	ctrl     *gomock.Controller
	recorder *MockEPICMockRecorder
}

// MockEPICMockRecorder is the mock recorder for MockEPIC
type MockEPICMockRecorder struct {
	mock *MockEPIC
}

// NewMockEPIC creates a new mock instance
func NewMockEPIC(ctrl *gomock.Controller) *MockEPIC {
	mock := &MockEPIC{ctrl: ctrl}
	mock.recorder = &MockEPICMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEPIC) EXPECT() *MockEPICMockRecorder {
	return m.recorder
}

// GetAccount mocks base method
func (m *MockEPIC) GetAccount() (AccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount")
	ret0, _ := ret[0].(AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockEPICMockRecorder) GetAccount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockEPIC)(nil).GetAccount))
}

// GetGroup mocks base method
func (m *MockEPIC) GetGroup() (GroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup")
	ret0, _ := ret[0].(GroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup
func (mr *MockEPICMockRecorder) GetGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockEPIC)(nil).GetGroup))
}

// AnnounceService mocks base method
func (m *MockEPIC) AnnounceGateway(url string, gw gatewayv1a2.Gateway) (GatewayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnnounceGateway", url, gw)
	ret0, _ := ret[0].(GatewayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnnounceService indicates an expected call of AnnounceService
func (mr *MockEPICMockRecorder) AnnounceGateway(url, gw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnnounceGateway", reflect.TypeOf((*MockEPIC)(nil).AnnounceGateway), url, gw)
}

// FetchService mocks base method
func (m *MockEPIC) FetchService(url string) (GatewayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchService", url)
	ret0, _ := ret[0].(GatewayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchService indicates an expected call of FetchService
func (mr *MockEPICMockRecorder) FetchService(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchService", reflect.TypeOf((*MockEPIC)(nil).FetchService), url)
}

// Delete mocks base method
func (m *MockEPIC) Delete(svcUrl string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", svcUrl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockEPICMockRecorder) Delete(svcUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEPIC)(nil).Delete), svcUrl)
}
